法一:整体思路：先用二分法找出最小值,即分割点 key;
     接下来判断 target 是在分割点的左边还是右边;
     最后再使用一次二分法找出 target 的位置
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0) return -1;
        int l = 0;
        int r = nums.size() - 1;
        int mid,key;
        while(l < r){
            mid = l + (r - l) / 2;
            if(nums[mid] > nums[r]) l = mid + 1;
            else r = mid;
        }
        key = l;
        l = 0;
        r = nums.size()-1;
        if(target >= nums[key] && target <= nums[r]) l = key;
        else r = key;
        while(l <= r){
            mid = l + (r-l)/2;
            if(nums[mid] == target) return mid;
            if(nums[mid] > target) r = mid - 1;
            else l = mid + 1;
        }
        return -1;
    }
};

法二:直接使用二分法，判断那个二分点,有几种可能性
    1)直接等于target
    2)在左半边的递增区域
      a. target 在 left 和 mid 之间
      b. 不在之间
    3)在右半边的递增区域
      a. target 在 mid 和 right 之间
      b. 不在之间
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0) return -1;
        int l = 0;
        int r = nums.size() - 1;
        int mid;
        while(l <= r){
            mid  = l + (r - l) / 2;
            if(nums[mid] == target) return mid;
            if(nums[mid] > nums[r]){
                if(nums[l] <= target && target < nums[mid]) r = mid - 1;
                else l = mid + 1;
            }else{
                if(nums[mid] < target && target <= nums[r]) l = mid + 1;
                else r = mid - 1;
            }
        }
        return -1;
    }
};

直接循环,但不满足题目要求的时间复杂度必须是 O(logn) 级别,O(logn)即使用二分法
class Solution {
public:
    int search(vector<int>& nums, int target) {
        for(int i = 0;i<nums.size();i++){
            if(nums[i] == target) return i;
        }
        return -1;
    }
};
