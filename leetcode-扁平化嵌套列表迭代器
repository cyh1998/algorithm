/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
private:
    stack<NestedInteger> m_stk;

public:
    NestedIterator(vector<NestedInteger>& nestedList) {
        for (int i = nestedList.size() - 1; i >= 0; --i) {
            m_stk.emplace(nestedList[i]);
        }
    }

    int next() {
        NestedInteger ptr = m_stk.top();
        m_stk.pop();
        return ptr.getInteger();
    }

    bool hasNext() {
        while(!m_stk.empty()) {
            NestedInteger ptr = m_stk.top();
            if (ptr.isInteger()) return true;
            m_stk.pop();
            auto v = ptr.getList();
            for (int i = v.size() - 1; i >= 0; --i) {
                m_stk.emplace(v[i]);
            }
        }
        return false;
    }
};

// class NestedIterator {
// private:
//     queue<int> m_queue;
    
//     void dfs(vector<NestedInteger> list) {
//         for (auto &i : list) {
//             if (i.isInteger()) m_queue.emplace(i.getInteger());
//             else dfs(i.getList());
//         }
//     }

// public:
//     NestedIterator(vector<NestedInteger>& nestedList) {
//         dfs(nestedList);
//     }

//     int next() {
//         int ret = m_queue.front();
//         m_queue.pop();
//         return ret;
//     }

//     bool hasNext() {
//         if (m_queue.empty()) return false;
//         else return true;
//     }
// };

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
