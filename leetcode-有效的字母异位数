//法一：计数，首先初始化一个长度为26的数组，遍历字符串s并用数组的值来记录各个字母出现的个数
//     再遍历字符串t并将指定的字母位置减一（相当于抵消的操作）
//     最后遍历数组arr，如果全部为0则代表所有字母都是相同的
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size()) return false;
        int arr[26]={0};
        for(int i = 0;i<s.size();i++){
            arr[s[i]-'a']++;
            arr[t[i]-'a']--;
        }
        for(int i = 0;i<26;i++){
            if(arr[i]!=0) return false;
        }
        return true;
    }
};

//法二：字符串排序，再判断排序后的字符串是否相等
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size()) return false;
        vector<int> arrs;
        vector<int> arrt;
        for(int i = 0;i<s.size();i++){
            arrs.push_back(s[i]);
            arrt.push_back(t[i]);
        }
        sort(arrs.begin(),arrs.end());
        sort(arrt.begin(),arrt.end());
        for(int i = 0;i<s.size();i++){
            if(arrs[i]!=arrt[i]) return false;
        }
        return true;
    }
};

//法二简写
class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin(),s.begin()+s.size());
        sort(t.begin(),t.begin()+t.size());
        if(s==t) return true;
        else return false;
    }
};
