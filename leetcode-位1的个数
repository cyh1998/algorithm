//循环32次，判断n的最后一位是否为1，计数
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count = 0;
        uint32_t test;
        int i = 32;
        while(i--){
            test = n&1;
            if(test==1) count++;
            n = n>>1;
        }
        return count;
    }
};

//利用val = (val & (val - 1))，val中的最后一个1将被&为0，循环判断val是否为零
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count = 0;
        uint32_t val = n;
        while(val!=0){
            count++;
            val = val & (val-1);
        }
        return count;
    }
};
