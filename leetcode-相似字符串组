class Djset {
public:
    vector<int> parent;
    vector<int> rank;
    int count;

    Djset(int n): parent(vector<int>(n)), rank(vector<int>(n)), count(n) {
        for (int i = 0; i < n; i++) parent[i] = i;
    }
    
    int find(int x) {
        if (x != parent[x]) parent[x] = find(parent[x]);
        return parent[x];
    }
    
    void merge(int x, int y) {
        int rootx = find(x);
        int rooty = find(y);
        if (rootx != rooty) {
            if (rank[rootx] < rank[rooty]) swap(rootx, rooty);
            parent[rooty] = rootx;
            count--;
            if (rank[rootx] == rank[rooty]) rank[rootx] += 1;
        }
    }
};

bool check(const string &a, const string &b) {
    int num = 0;
    for (int i = 0; i < a.size(); i++) {
        if (a[i] != b[i]) {
            num++;
            if (num > 2) return false;
        }
    }
    return true;
}

class Solution {
public:
    int numSimilarGroups(vector<string>& strs) {
        int n = strs.size();
        Djset ds(n);

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (check(strs[i], strs[j])) ds.merge(i, j);
            }
        }

        return ds.count;
    }
};
