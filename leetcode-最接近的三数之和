排序和双指针
首先进行数组排序，时间复杂度 O(nlogn)
在数组 nums 中，进行遍历，每遍历一个值利用其下标i，形成一个固定值 nums[i]
再使用前指针指向 left = i + 1 处，后指针指向 right = nums.length - 1 处，也就是结尾处
根据 sum = nums[i] + nums[left] + nums[right] 的结果，判断 sum 与目标 target 的距离，如果更近则更新结果 ans
同时判断 sum 与 target 的大小关系，因为数组有序:
如果 sum > target 则 right--;
如果 sum < target 则 left++;
如果 sum == target 则说明距离为 0 直接返回结果
整个遍历过程，固定值为 n 次，双指针为 n 次，时间复杂度为 O(n^2)
总时间复杂度：O(nlogn) + O(n^2) = O(n^2) 

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int left,right;
        int res = nums[0] + nums[1] + nums[2];
        for(int i = 0;i<nums.size()-1;i++){
            left = i + 1;
            right = nums.size()-1;    
            while(left<right){
                int sum = nums[i] + nums[left] + nums[right];
                if(abs(target-sum) < abs(target-res)) res = sum;
                if(sum == target) return target;
                else if(sum < target) left++;
                else right--;
            }       
        }
        return res;
    }
};
