/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //法一：将链表的值放入数组，双指针判断数组是否回文
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        vector<int> arr;
        ListNode* p = head;
        while(p){
            arr.push_back(p->val);
            p = p->next;
        }
        int left = 0;
        int right = arr.size()-1;
        while(left<right){
            if(arr[left]!=arr[right]) return false;
            left++;
            right--;
        }
        return true;
    }
};

//法二：双向链表
//     list一个线性双向链表结构，它的数据由若干个节点构成，每一个节点都包括一个信息块（即实际存储的数据）、一个前驱指针和一个后驱指针
//     与向量(vectors)相比, 它允许快速的插入和删除
//     list相关方法
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        list<int> vals;
        while(head != nullptr) {
            vals.push_back(head->val);
            head = head->next;
        }      
        while(vals.size() > 1) {
            if (vals.front() != vals.back()) return false;
            vals.pop_front();
            vals.pop_back();
        }        
        return true;
    }
};

//法三：快慢指针+链表反转
