//暴力法
class Solution {
public:
    int countPrimes(int n) {
        if(n<2) return 0;
        if(n==2) return 0;
        if(n==3) return 1;
        int count = 2;
        for(int i = 4;i<n;i++){
            count++;
            int num = int(sqrt(i));
            for(int j = 2;j<=num;j++){
                if(i%j==0){
                    count--;
                    break;
                }
            }            
        }
        return count;
    }
};

//厄拉多塞筛法
//先将2－N的各数放入表中，然后在2的上面画一个圆圈，然后划去2的其他倍数；
//接着，第一个既未画圈又没有被划去的数是3，将它画圈，再划去3的其他倍数；
//现在既未画圈又没有被划去的第一个数 是5，将它画圈，并划去5的其他倍数……依次类推，
//一直到所有小于或等于N的各数都画了圈或划去为止。这时，表中画了圈的以及未划去的那些数正好就是小于N的素数。
//优化之后的ac答案
class Solution {
public:
    int countPrimes(int n) {
        if(n<3) return 0;
        vector<int> arr(n,1);
        int count = 0;
        for(int i = 2;i<sqrt(n)+1;i++){
            if(arr[i]==1){
                for(int j=i*i;j<n;j=j+i){
                    arr[j]=0;
                }
            }
        }
        for(int i = 2;i<n;i++){
            if(arr[i]==1) count++;
        }
        return count;
    }
};
