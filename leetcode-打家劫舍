//动态规划，核心找动态转移方程
//动态规划可进行优化，即只保存前两个数值
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size()==0) return 0;
        if(nums.size()==1) return nums[0];
        if(nums.size()==2) return max(nums[0],nums[1]);
        vector<int> res;
        res.push_back(nums[0]);
        res.push_back(max(nums[0],nums[1]));
        int i;
        for(i = 2;i<nums.size();i++){
            res.push_back(max(res[i-2]+nums[i],res[i-1]));   //核心的dp方程
        }
        return res[i-1];
    }
};

//记忆化搜索

