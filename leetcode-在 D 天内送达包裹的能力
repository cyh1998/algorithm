class Solution {
public:
    int shipWithinDays(vector<int>& weights, int D) {
        int l = *max_element(weights.begin(), weights.end());
        int r = accumulate(weights.begin(), weights.end(), 0);
        while (l <= r) {
            int mid = l + (r - l) / 2;
            int day = needDays(weights, mid);
            if (day <= D) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

private:
	int needDays(vector<int>& weights, int w) {
		int tmp = w, days = 0;
		for (int i = 0; i < weights.size();) {
			if (tmp >= weights[i]) {
				tmp -= weights[i++];
			} else {
				++days;
				tmp = w;
			}
		}
		return days + 1;
	}
};
