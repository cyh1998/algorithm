class Solution {
public:
	map<pair<string, string>, bool> m;

    bool isScramble(string s1, string s2) {
		return dfs(s1, s2);
    }
	
	bool dfs(string s1, string s2) {
		if (m.count(make_pair(s1, s2)) > 0) return m[make_pair(s1, s2)];
		if (s1 == s2) {
			m[make_pair(s1, s2)] = true;
			return true;
		}

		if (!check(s1, s2)) {
			m[make_pair(s1, s2)] = false;
			return false;
		}

		int n = s1.size();
		for (int i = 1; i < n; ++i) {
            string a = s1.substr(0, i), b = s1.substr(i);
            string c = s2.substr(0, i), d = s2.substr(i);
            string e = s2.substr(0, n - i), f = s2.substr(n - i);

			if ((dfs(a, c) && dfs(b, d)) || (dfs(a, f) && dfs(b, e))) {
				m[make_pair(s1, s2)] = true;
				return true;
			}

		}

		m[make_pair(s1, s2)] = false;
		return false;
	}

	bool check(string s1, string s2){
		vector<int> v1(26), v2(26);
		int n = s1.size();
		for (int i = 0; i < n; ++i) {
			v1[s1[i] - 'a']++;
			v2[s2[i] - 'a']++;
		}
		return v1 == v2;
	}
};
