class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size(), ans = 0;;
        vector<int> d(n, 1);
        vector<int> g(n + 1, INT_MAX);
        for(int i = 0; i < n; ++i){
            int k = lower_bound(g.begin() + 1, g.end(), nums[i]) - g.begin();
            g[k] = nums[i];
            d[i] = k;
            ans = max(ans, d[i]);
        }
        return ans;
    }

    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int n = envelopes.size();
        vector<int> temp_w, temp_h;

        sort(envelopes.begin(), envelopes.end(), [](auto a, auto b) {
            if (a[0] == b[0]) return a[1] > b[1];
            else return a[0] < b[0];
        });
        for (auto& i : envelopes) temp_w.emplace_back(i[1]);

        sort(envelopes.begin(), envelopes.end(), [](auto a, auto b) {
            if (a[1] == b[1]) return a[0] > b[0];
            else return a[1] < b[1];
        });
        for (auto& i : envelopes) temp_h.emplace_back(i[0]);

        return max(lengthOfLIS(temp_w), lengthOfLIS(temp_h));
    }
};
