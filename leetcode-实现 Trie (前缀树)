class TrieNode {
public:
    vector<TrieNode*> children;
    bool isWord;

    TrieNode() : isWord(false), children(26, nullptr) {
    }

    ~TrieNode() {
        for (auto &i : children) delete i;
    }
};

class Trie {
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* ptr = root;
        for (char &i : word) {
            if (!ptr->children[i - 'a']) ptr->children[i - 'a'] = new TrieNode();
            ptr = ptr->children[i - 'a'];
        }
        ptr->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* ptr = root;
        for (char &i : word) {
            if (!ptr->children[i - 'a']) return false;
            ptr = ptr->children[i - 'a'];
        }
        return ptr->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* ptr = root;
        for (char &i : prefix) {
            if (!ptr->children[i - 'a']) return false;
            ptr = ptr->children[i - 'a'];
        }
        return true;
    }

private:
    TrieNode* root;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
