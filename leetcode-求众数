//使用hash表，对数组进行一趟扫描统计每个元素出现的次数，即可得到多数元素
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int,int> res;
        map<int,int>::iterator iter;
        for(int i = 0;i<nums.size();i++){
            iter = res.find(nums[i]); //可使用map.count()查找元素的个数
            if(iter == res.end()){
                res[nums[i]] = 1;
            }else{
                res[nums[i]] = res[nums[i]] + 1;
            }
        }
         for(iter = res.begin();iter != res.end();iter++){
            if(iter->second >nums.size()/2)
                return iter->first;
            else continue;
        }
        return NULL;
    }
};

//Boyer-Moore（摩尔投票）算法
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int res = nums[0];
        int num = 1;
        for(int i = 1;i<nums.size();i++){
            if(num==0){
                res= nums[i];
                num = 1;
            }
            else{
                if(res == nums[i]) num++;
                else num--;
            }
        }
        return res;
    }
};
