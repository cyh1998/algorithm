//法一：DFS(超时)
class Solution {
public:
    int dfs(string s, int index, string t, int temp) {
        if (temp == t.size()) return 1;

        if (index == s.size()) return 0;

        if (s[index] == t[temp]) {
            return dfs(s, index + 1, t, temp + 1) + dfs(s, index + 1, t, temp);
        } else {
            return dfs(s, index + 1, t, temp);
        }
    }

    int numDistinct(string s, string t) {
        return dfs(s, 0, t, 0);
    }
};

//法二：记忆化搜索
class Solution {
public:
    vector<vector<int>> arr;

    int dfs(string s, int index, string t, int temp) {
        if (temp == t.size()) return 1;

        if (index == s.size()) return 0;

        if (arr[temp][index] != -1) return arr[temp][index];

        if (s[index] == t[temp]) {
            arr[temp][index] = dfs(s, index + 1, t, temp + 1) + dfs(s, index + 1, t, temp);
        } else {
            arr[temp][index] = dfs(s, index + 1, t, temp);
        }

        return arr[temp][index];
    }

    int numDistinct(string s, string t) {
        int n = s.size(), m = t.size();
        arr = vector<vector<int>>(m, vector<int>(n, -1));
        return dfs(s, 0, t, 0);
    }
};

//法三：动态规划
class Solution {
public:
    int numDistinct(string s, string t) {
        int n = s.size(), m = t.size();
        vector<vector<long long>> dp(m + 1, vector<long long>(n + 1));
        
        for (int i = 0; i <= n; ++i) dp[0][i] = 1;

        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (s[j - 1] == t[i - 1]) dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1];
                else dp[i][j] = dp[i][j - 1];
            }
        }

        return dp[m][n];
    }
};
